# -*- coding: utf-8 -*-
"""CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bFCGVAVU3UJ6OLH6ie1vW1_FMyNArV3-
"""

import tensorflow as tf
from tensorflow.keras import datasets,layers,models
import matplotlib.pyplot as plt
import numpy as np

(x_train,y_train),(x_test,y_test) = datasets.cifar10.load_data()
x_train.shape

x_test.shape

plt.figure(figsize = (15,2))
plt.imshow(x_train[1])

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def plot_sample(x,y,index):
  plt.figure(figsize = (15,2))
  plt.imshow(x(index))
  plt.xlabel(classes[])

y_train.shape

y_train[:5]

y_train= y_train.reshape(-1,)
y_train[:5]

def plot_sample(x,y,index):
  plt.figure(figsize = (15,2))
  plt.imshow(x[index])
  plt.xlabel(classes[y[index]])

plot_sample(x_train, y_train, 8)

"""NORMALIZATION **bold text**"""

x_train = x_train/255.0
x_test = x_test/255.0

"""building ann for image classification"""

!pip install tensorflow

from tensorflow import keras
from tensorflow.keras import layers
ann = models.Sequential([
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(3000, activation='relu'),
        layers.Dense(1000, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

ann.compile(optimizer='SGD',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

ann.fit(x_train, y_train, epochs=5)

from sklearn.metrics import confusion_matrix, classification_report
import numpy as np
y_pred = ann.predict(x_test)
y_pred_classes = [np.argmax(element) for element in y_pred]
print("classification report: \n",classification_report(y_test,y_pred_classes))

cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics = ['accuracy'])

cnn.fit(x_train, y_train, epochs=10)

cnn.evaluate(x_test,y_test)

y_pred = cnn.predict(x_test)
y_pred[:7]

y_classes= [np.argmax(element) for element in y_pred]
y_classes[:7]

y_test = y_test.reshape(-1)
y_test[:7]

plot_sample(x_test,y_test,3)

classes[y_classes[3]]